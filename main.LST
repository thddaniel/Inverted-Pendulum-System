C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 1   


C51 COMPILER V9.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: F:\keil\keil_another\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include"includes.h"
   2          #include"defines.h"
   3          
   4          
   5          
   6          //1ms延时函数
   7          //实测有极小误差 在11.0592M晶振的stc12c5a60s2单片机上
   8          void delay_ms(uint16 n)  
   9          {
  10   1        uint8 x,y;
  11   1        for(;n>0;n--)
  12   1          for(x=25;x>0;x--)
  13   1            for(y=108;y>0;y--);
  14   1      }
  15          
  16          //250us延时函数，用于周期摆动
  17          void delay_250us(uint16 n)
  18          {
  19   1        uint8 x,y;
  20   1        for(;n>0;n--)
  21   1          for(x=25;x>0;x--)
  22   1            for(y=25;y>0;y--);
  23   1      }
  24          
  25          /*
  26          //串口1相关（使用独立波特率发生器）释放T1
  27          void uart_init(void)    
  28          {        
  29              SCON = 0x50;        
  30            AUXR = 0x11;
  31            BRT  = 0xFD;
  32            //EA = 1;
  33            //ES = 1;
  34          }
  35          
  36          void uart_SEND_16(uint16 dat)
  37          {
  38            SBUF = dat/256;
  39            while(!TI);
  40            TI = 0;
  41            SBUF = dat%256;
  42            while(!TI);
  43            TI = 0;
  44          }
  45          void uart_SEND_8(uint8 dat)
  46          {
  47            SBUF = dat;
  48            while(!TI);
  49            TI = 0;
  50          }
  51          
  52          void uart_SEND_str(uint8 *str)
  53          {
  54            uint8 i = 0;
  55            while (str[i])
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 2   

  56            {
  57              uart_SEND_8(str[i]);
  58              i++;
  59            }
  60          }
  61          */
  62          
  63          /*****************************内部AD初始化*****************/
  64          
  65          void Get_ADC(uint8 ch,uint8 ADC_SPEED,uint16 times)
  66          {
  67   1        ADC_Result = 0;           //变量初始化
  68   1        ADC_counts = 0;
  69   1        ADC_times = times;          //形参全局化，方便中断使用
  70   1        ADC_ch_choose = ch;
  71   1        ADC_speed_choose = ADC_SPEED;
  72   1        ADC_CONTR = 0x00;         //寄存器初始化
  73   1        ADC_RES = 0;
  74   1        ADC_RESL = 0;
  75   1        AUXR1 |= 0x04;            //寄存器设置//10位ADC
  76   1        P1ASF = 0xff;
  77   1        P1M1 = 0xff;
  78   1        P1M0 = 0x00;
  79   1        ADC_CONTR = ADC_POWER|ADC_speed_choose|ADC_START|ADC_ch_choose;
  80   1        _nop_();              //延时等待数据写入ADC_CONTR
  81   1        _nop_();
  82   1        _nop_();
  83   1        EA = 1;
  84   1        EADC = 1;
  85   1      }
  86          /*****************************数据曲线拟合*****************/
  87          void Data_optimization(uint16 Value)
  88          {
  89   1        //static int16 angle_B_now,angle_B_last;
  90   1        if (Value>=0x02e6)      //0~55
  91   1        {
  92   2          if (Value>=0x0382 && Value<0x03A3)       
  93   2          {angle_A = 20.0-(20.0*(Value-0x0382))/0x0021;} //0~20
  94   2          else if (Value>=0x0372 && Value<0x0382)  
  95   2          {angle_A = 25.0-(5.00*(Value-0x0372))/0x0010;angle_B = 21.4961-angle_A*0.3201;}//timer1_setting = 1600;}
             -  //20~25
  96   2          else if (Value>=0x0362 && Value<0x0372)  
  97   2          {angle_A = 30.0-(5.00*(Value-0x0362))/0x0010;angle_B = 21.2942-angle_A*0.3120;}//timer1_setting = 1000;}
             -  //25~30
  98   2          else if (Value>=0x034D && Value<0x0362)  
  99   2          {angle_A = 35.00-(5.00*(Value-0x034D))/0x0015;angle_B = 21.0154-angle_A*0.3027;}//timer1_setting = 1000;
             -}  //30~35
 100   2          else if (Value>=0x0338 && Value<0x034D)  
 101   2          {angle_A = 40.00-(5.00*(Value-0x0338))/0x0015;angle_B = 20.6415-angle_A*0.2920;}//timer1_setting = 1000;
             -}  //35~40
 102   2          else if (Value>=0x031E && Value<0x0338)  
 103   2          {angle_A = 45.00-(5.00*(Value-0x031E))/0x001a;angle_B = 20.1499-angle_A*0.2798;}//timer1_setting = 1000;
             -}  //40~45
 104   2          else if (Value>=0x0304 && Value<0x031E)  
 105   2          {angle_A = 50.00-(5.00*(Value-0x0304))/0x001a;angle_B = 19.5131-angle_A*0.2656;}//timer1_setting = 1000;
             -}  //45~50
 106   2          else if (Value>=0x02E6 && Value<0x0304)  
 107   2          {angle_A = 55.00-(5.00*(Value-0x02E6))/0x001e;angle_B = 18.6966-angle_A*0.2493;}//timer1_setting = 1000;
             -}  //50~55
 108   2        }
 109   1        else if (Value>=0x01fd && Value<0x02e6)     //55~90
 110   1        {
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 3   

 111   2          if (Value>=0x02C7 && Value<0x02E6)     
 112   2          {angle_A = 60.00-(5.00*(Value-0x02C7))/0x001f;angle_B = 17.6575-angle_A*0.2304;}//timer1_setting = 900;}
             -  //55~60
 113   2          else if (Value>=0x02A8 && Value<0x02C7)  
 114   2          {angle_A = 65.00-(5.00*(Value-0x02A8))/0x001f;angle_B = 16.3418-angle_A*0.2085;}//timer1_setting = 800;}
             -  //60~65
 115   2          else if (Value>=0x0287 && Value<0x02A8)  
 116   2          {angle_A = 70.00-(5.00*(Value-0x0287))/0x0021;angle_B = 14.6813-angle_A*0.1829;}//timer1_setting = 700;}
             -  //65~70
 117   2          else if (Value>=0x0265 && Value<0x0287)  
 118   2          {angle_A = 75.00-(5.00*(Value-0x0265))/0x0022;angle_B = 12.5895-angle_A*0.1530;}//timer1_setting = 600;}
             -  //70~75
 119   2          else if (Value>=0x0241 && Value<0x0265)  
 120   2          {angle_A = 80.00-(5.00*(Value-0x0241))/0x0024;angle_B = 9.9567-angle_A*0.1179;}//timer1_setting = 500;} 
             - //75~80
 121   2          else if (Value>=0x021d && Value<0x0241)  
 122   2          {angle_A = 85.00-(5.00*(Value-0x021d))/0x0024;angle_B = 6.6434-angle_A*0.0765;}//timer1_setting = 300;} 
             - //80~85
 123   2          else if (Value>=0x01Fd && Value<0x021d)  
 124   2          {angle_A = 90.00-(5.00*(Value-0x01Fd))/0x0022;angle_B = 2.4726-angle_A*0.0274;}//timer1_setting = 300;} 
             - //85~90
 125   2        }
 126   1        else if (Value>=0x00f5 && Value<0x01fd)     //90~130
 127   1        {
 128   2          if (Value>=0x01D8 && Value<0x01fd)  
 129   2          {angle_A = 95.00-(5.00*(Value-0x01D8))/0x0023;angle_B = angle_A*0.0308-2.7777;}//timer1_setting = 300;} 
             - //90~95
 130   2          else if (Value>=0x01B5 && Value<0x01D8)  
 131   2          {angle_A = 100.00-(5.00*(Value-0x01B5))/0x0023;angle_B = angle_A*0.1004-9.3823;}//timer1_setting = 300;}
             -  //95~100
 132   2          else if (Value>=0x0192 && Value<0x01B5)  
 133   2          {angle_A = 105.00-(5.00*(Value-0x0192))/0x0023;angle_B = angle_A*0.1832-17.6697;}//timer1_setting = 500;
             -}  //100~105
 134   2          else if (Value>=0x0171 && Value<0x0192)  
 135   2          {angle_A = 110.00-(5.00*(Value-0x0171))/0x0021;angle_B = angle_A*0.2817-28.0104;}//timer1_setting = 600;
             -}  //105~110
 136   2          else if (Value>=0x0151 && Value<0x0171)  
 137   2          {angle_A = 115.00-(5.00*(Value-0x0151))/0x0020;angle_B = angle_A*0.3977-40.7732;}//timer1_setting = 700;
             -} //110~115
 138   2          else if (Value>=0x0130 && Value<0x0151)  
 139   2          {angle_A = 120.00-(5.00*(Value-0x0130))/0x0020;angle_B = angle_A*0.5321-56.2245;}//timer1_setting = 800;
             -}  //115~120
 140   2          else if (Value>=0x0111 && Value<0x0130)  
 141   2          {angle_A = 125.00-(5.00*(Value-0x0111))/0x001f;angle_B = angle_A*0.6830-74.3318;}//timer1_setting = 900;
             -}  //120~125
 142   2          else if (Value>=0x00F5 && Value<0x0111)  
 143   2          {angle_A = 130.00-(5.00*(Value-0x00F5))/0x001c;angle_B = angle_A*0.8439-94.4508;}//timer1_setting = 1000
             -;}  //125~130
 144   2        }
 145   1        else if (Value>=0x0060 && Value<0x00f5)    //130~180
 146   1        {
 147   2          if (Value>=0x00DB && Value<0x00F5)  
 148   2          {angle_A = 135.00-(5.00*(Value-0x00DB))/0x001a;angle_B = angle_A*1.0016-114.9530;}//timer1_setting = 100
             -0;}  //130~135
 149   2          else if (Value>=0x00C4 && Value<0x00DB)  
 150   2          {angle_A = 140.00-(5.00*(Value-0x00C4))/0x0017;angle_B = angle_A*1.1355-133.0269;}//timer1_setting = 100
             -0;}  //135~140
 151   2          else if (Value>=0x00AD && Value<0x00C4)  
 152   2          {angle_A = 145.00-(5.00*(Value-0x00AD))/0x0017;angle_B = angle_A*1.2215-145.0574;}//timer1_setting = 100
             -0;}  //140~145
 153   2          else if (Value>=0x009A && Value<0x00AD)  
 154   2          {angle_A = 150.00-(5.00*(Value-0x009A))/0x0013;angle_B = angle_A*1.2405-147.8144;}//timer1_setting = 100
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 4   

             -0;}  //145~150
 155   2          else if (Value>=0x0088 && Value<0x009A)  
 156   2          {angle_A = 155.00-(5.00*(Value-0x0088))/0x0012;angle_B = angle_A*1.1880-139.9403;}//timer1_setting = 100
             -0;}  //150~155
 157   2          else if (Value>=0x007B && Value<0x0088)  
 158   2          {angle_A = 160.00-(5.00*(Value-0x007B))/0x000d;angle_B = angle_A*1.0763-122.6295;}//timer1_setting = 160
             -0;}  //155~160
 159   2          else if (Value>=0x0060 && Value<0x007B)  
 160   2          {angle_A = 180.00-(20.00*(Value-0x0060))/0x001b;}  //160~180
 161   2        }
 162   1        if( angle_A >= 180.00) angle_A = 180.00;     //防止运算溢出
 163   1        if( angle_A <= 0) angle_A = 0;
 164   1        if( angle_B >= 90.00)  angle_B = 90.00;
 165   1        if( angle_B <= 0) angle_B = 0;
 166   1         
 167   1        //angle_B_last = angle_B_now;
 168   1        //angle_B_now = angle_B;
 169   1        //angle_B = angle_B + (angle_B_now-angle_B_last); 
 170   1        
 171   1              
 172   1      }
 173          
 174          //角度计算与传送
 175          void angle_count(void)
 176          { 
 177   1         static uint16 pulse_count_now,pulse_count_last=4000;
 178   1         uint32 a_temp = 0;
 179   1         EADC = 0; 
 180   1         Data_optimization(NEW_DATA);
 181   1         if(flag == 0)
 182   1         {
 183   2           if(angle_A>90.00)
 184   2           {
 185   3              pulse_count = (uint16)((angle_A-90.00)/0.225*2) + pulse_standard;
 186   3              CW = 1;
 187   3           }
 188   2           else if(angle_A<90.00)
 189   2           {
 190   3              pulse_count = (uint16)((90.00-angle_A)/0.225*2) + pulse_standard;
 191   3              CW = 0;
 192   3           }
 193   2         }
 194   1         if(flag == 2)
 195   1         {
 196   2          if(angle_A>=90.00)//(angle_A>=90.50)
 197   2          {
 198   3             pulse_count_now = ((uint16)((angle_A+angle_B-89.775)/0.225*2)) + pulse_standard;
 199   3          }
 200   2          else//(angle_A<=89.50)
 201   2          {
 202   3             pulse_count_now = pulse_standard - ((uint16)((90.225-angle_A-angle_B)/0.225*2));
 203   3          }
 204   2          pulse_count = 2*pulse_count_now-pulse_count_last;
 205   2          pulse_count_last = pulse_count_now;
 206   2         }
 207   1         a_temp = (uint32)(angle_A*100);
 208   1         show[0] = a_temp/10000+'0';       //12864显示
 209   1         show[1] = a_temp/1000%10+'0';
 210   1         show[2] = a_temp/100%10+'0';
 211   1         show[4] = a_temp/10%10+'0';
 212   1         show[5] = a_temp%10+'0'; 
 213   1         show_str16(0x90,show,3);
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 5   

 214   1         a_temp = (uint32)(angle_B*100);
 215   1         show[0] = a_temp/10000+'0';       //12864显示
 216   1         show[1] = a_temp/1000%10+'0';
 217   1         show[2] = a_temp/100%10+'0';
 218   1         show[4] = a_temp/10%10+'0';
 219   1         show[5] = a_temp%10+'0'; 
 220   1         show_str16(0x98,show,3);
 221   1         //delay_ms(5);
 222   1         //puts(show);
 223   1                     //刷新12864
 224   1         //uart_SEND_16(NEW_DATA);
 225   1         //uart_SEND_8(P2);
 226   1         EADC = 1;
 227   1      
 228   1      }
 229          
 230          uint8 type_choose(void)             //功能选择
 231          {
 232   1        P2 = 0xff;
 233   1        while(P2 != 0xff);
 234   1        if(P2 == 0x7f) return 1;
 235   1        else if(P2 == 0xbf) return 2;
 236   1        else if(P2 == 0xdf) return 3;
 237   1        else return 4;
 238   1      }
 239          
 240          
 241          //系统初始化
 242          void system_init(void)
 243          {
 244   1        EN = 1;
 245   1        CW = 1;
 246   1        CK = 1;
 247   1        show_page(page1);
 248   1        delay_ms(1000);
 249   1        show_page(page2);
 250   1        delay_ms(1000);
 251   1        show_page(page3);
 252   1      }
 253          
 254          void Mode_1(void)    //周期摆动模式
 255          {
 256   1        uint8 i;
 257   1        w_com(0x01);show_str16(0x90,str2,8);
 258   1        delay_ms(500);w_com(0x01);
 259   1        show_page(page4);
 260   1        while(P2 != 0xef);
 261   1        EN = 0;CW = 1;
 262   1        for(i=200;i>0;i--)
 263   1        {
 264   2          delay_250us(5);CK = ~CK;
 265   2          delay_250us(5);CK = ~CK;
 266   2        }
 267   1        show_page(page5);
 268   1        delay_ms(1000);
 269   1        while(P2 != 0xef);
 270   1        EN = 0;
 271   1        while(1)
 272   1        {
 273   2          delay_250us(5);CK = ~CK;  
 274   2        }
 275   1      }
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 6   

 276          
 277          void Mode_2(void)    //硬币随摆模式
 278          {
 279   1        uint8 a=1;
 280   1        w_com(0x01);show_str16(0x88,str3,8);
 281   1        delay_ms(500);w_com(0x01);
 282   1        show_page(page4);
 283   1        P2 = 0xff;
 284   1        while(P2 != 0xf3);
 285   1        delay_ms(1000);
 286   1        LCD = 1;
 287   1        EN = 0;CW = 1;
 288   1        pulse_now = pulse_standard;
 289   1        show_page(page6);
 290   1        TH0 = (65536-timer0_setting)/256;
 291   1        TL0 = (65536-timer0_setting)%256;
 292   1        TMOD = 0x01;
 293   1        Get_ADC(0,ADC_SPEEDHH,100);
 294   1        delay_ms(40);
 295   1        EA = 1;
 296   1        ET0 = 1;
 297   1        TR0 = 1;
 298   1        PT0 = 1;
 299   1        while(a)
 300   1        {
 301   2          if(angle_A>=11000||angle_A<=7000) {ET0 = 1;TR0 = 1;a=0;}
 302   2        }
 303   1        while(1);
 304   1      }
 305          
 306          void Mode_3(void)    //自动瞄靶模式
 307          {
 308   1        w_com(0x01);show_str16(0x98,str4,8);
 309   1        delay_ms(500);w_com(0x01);
 310   1        show_page(page7);
 311   1        while(P2 != 0xef);
 312   1        delay_ms(20);
 313   1        flag = 2;
 314   1        EN = 0;CW = 1;
 315   1        pulse_now = pulse_standard;
 316   1        show_page(page6);
 317   1        TH1 = (65536-timer1_setting)/256;
 318   1        TL1 = (65536-timer1_setting)%256;
 319   1        TMOD = 0x10;
 320   1        Get_ADC(0,ADC_SPEEDHH,100);
 321   1        delay_ms(30);
 322   1        EA = 1;
 323   1        ET1 = 1;
 324   1        TR1 = 1;
 325   1        PT1 = 1;
 326   1        while(1);
 327   1      }
 328          
 329          ///主函数
 330          
 331          void main(void)
 332          {
 333   1        uint8 type = 4;
 334   1        LCD = 0;
 335   1        LCD_init();
 336   1        //uart_init();
 337   1        system_init();
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 7   

 338   1        while(1)
 339   1        {
 340   2          type = type_choose();
 341   2          switch(type)         //功能选择
 342   2          {
 343   3            case 1:Mode_1();break;
 344   3            case 2:Mode_2();break;
 345   3            case 3:Mode_3();break;
 346   3            case 4:break;
 347   3          }
 348   2        }
 349   1      }
 350          
 351          void timer0_interrupt(void) interrupt 1
 352          {
 353   1        TH0 = (65536-timer0_setting)/256;
 354   1        TL0 = (65536-timer0_setting)%256;
 355   1        if(P2 != 0xf3&&flag==0) {flag = 1;flag = 1;flag = 1;flag = 1;CW = ~CW;EADC=0;}
 356   1        if(flag == 0)
 357   1        { 
 358   2          if(pulse_now < pulse_count) {CK = ~CK;pulse_now++;}//校正电机
 359   2        }
 360   1        else
 361   1        {
 362   2          CK = ~CK;
 363   2          if(--pulse_now == pulse_standard) {ET0 = 0;LCD = 0;EADC=1;}//电机归零
 364   2        }
 365   1      }
 366          
 367          void timer1_interrupt(void) interrupt 3
 368          {
 369   1        //static uint8 cnt = 40;
 370   1        uint8 i = 30;
 371   1        TH1 = (65536-timer1_setting)/256;
 372   1        TL1 = (65536-timer1_setting)%256;
 373   1        //if(P2 == 0xef&&flag==0) {flag = 1;CW = ~CW;}
 374   1        if(flag == 2)
 375   1        {/* 
 376   2          if(pulse_now < (pulse_count)) 
 377   2          {
 378   2            cnt++;
 379   2            if(cnt>145)
 380   2            {
 381   2              CW = 1;for(;i>0;i--);CK = ~CK;pulse_now++;
 382   2              cnt = 145;
 383   2            }
 384   2          }//校正电机
 385   2          if(pulse_now > (pulse_count)) 
 386   2          {     
 387   2            cnt--;
 388   2            if(cnt<5)
 389   2            {
 390   2              CW = 0;for(;i>0;i--);CK = ~CK;pulse_now--;
 391   2              cnt = 5;
 392   2            }
 393   2          } */
 394   2            
 395   2          if(pulse_now < (pulse_count)) 
 396   2          {
 397   3              CW = 1;for(;i>0;i--);CK = ~CK;pulse_now++;
 398   3          
 399   3          }//校正电机
C51 COMPILER V9.06   MAIN                                                                  10/25/2013 21:32:48 PAGE 8   

 400   2        if(pulse_now > (pulse_count)) 
 401   2          {
 402   3              CW = 0;for(;i>0;i--);CK = ~CK;pulse_now--;
 403   3      
 404   3          } 
 405   2        }
 406   1      }
 407          
 408          
 409          void ADC_interrupt(void) interrupt 5    
 410          {
 411   1        ADC_CONTR &= !ADC_FLAG;         //清除中断标志
 412   1        ADC_Result = ADC_Result + ADC_RES*256+ADC_RESL;     //数据累加
 413   1        ADC_counts++;
 414   1        if(ADC_counts == ADC_times)
 415   1        {
 416   2           NEW_DATA = (ADC_Result+ADC_times/2)/ADC_times;   //ADC计算
 417   2           ADC_counts = 0;
 418   2           ADC_Result = 0;
 419   2           angle_count();
 420   2        }
 421   1         ADC_CONTR = ADC_POWER|ADC_speed_choose|ADC_START|ADC_ch_choose;
 422   1        _nop_();
 423   1        _nop_();
 424   1        _nop_();
 425   1      }
 426          
 427          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5500    ----
   CONSTANT SIZE    =    712    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     40      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
